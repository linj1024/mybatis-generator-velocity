package mbg.test.mb3.generated.annotated.hierarchical.mapper;

import java.util.List;
import java.util.Map;
import mbg.test.mb3.generated.annotated.hierarchical.model.AwfulTable;
import mbg.test.mb3.generated.annotated.hierarchical.model.AwfulTableExample.Criteria;
import mbg.test.mb3.generated.annotated.hierarchical.model.AwfulTableExample.Criterion;
import mbg.test.mb3.generated.annotated.hierarchical.model.AwfulTableExample;
import org.apache.ibatis.jdbc.SQL;

public class AwfulTableSqlProvider {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table awful table
     *
     * @mbg.generated Tue May 28 11:12:45 CST 2019
     */
    public String countByExample(AwfulTableExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("\"awful table\" A");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table awful table
     *
     * @mbg.generated Tue May 28 11:12:45 CST 2019
     */
    public String deleteByExample(AwfulTableExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("\"awful table\" A");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table awful table
     *
     * @mbg.generated Tue May 28 11:12:45 CST 2019
     */
    public String insertSelective(AwfulTable record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("\"awful table\"");
        
        if (record.getFirstFirstName() != null) {
            sql.VALUES("\"first name\"", "@{firstFirstName,jdbcType=VARCHAR}");
        }
        
        if (record.getSecondFirstName() != null) {
            sql.VALUES("FIRST_NAME", "@{secondFirstName,jdbcType=VARCHAR}");
        }
        
        if (record.getThirdFirstName() != null) {
            sql.VALUES("FIRSTNAME", "@{thirdFirstName,jdbcType=VARCHAR}");
        }
        
        if (record.getLastName() != null) {
            sql.VALUES("\"last name\"", "@{lastName,jdbcType=VARCHAR}");
        }
        
        if (record.geteMail() != null) {
            sql.VALUES("E_MAIL", "@{eMail,jdbcType=VARCHAR}");
        }
        
        if (record.getId1() != null) {
            sql.VALUES("\"_id1\"", "@{id1,jdbcType=INTEGER}");
        }
        
        if (record.getId2() != null) {
            sql.VALUES("\"$id2\"", "@{id2,jdbcType=INTEGER}");
        }
        
        if (record.getId5() != null) {
            sql.VALUES("\"id5_\"", "@{id5,jdbcType=INTEGER}");
        }
        
        if (record.getId6() != null) {
            sql.VALUES("\"id6$\"", "@{id6,jdbcType=INTEGER}");
        }
        
        if (record.getId7() != null) {
            sql.VALUES("\"id7$$\"", "@{id7,jdbcType=INTEGER}");
        }
        
        if (record.getEmailaddress() != null) {
            sql.VALUES("EMAILADDRESS", "@{emailaddress,jdbcType=VARCHAR}");
        }
        
        if (record.getFrom() != null) {
            sql.VALUES("\"from\"", "@{from,jdbcType=VARCHAR}");
        }
        
        sql.VALUES("ACTIVE", "@{active,jdbcType=BIT}");
        
        if (record.getActive1() != null) {
            sql.VALUES("ACTIVE1", "@{active1,jdbcType=BOOLEAN}");
        }
        
        if (record.getActive2() != null) {
            sql.VALUES("ACTIVE2", "@{active2,jdbcType=BIT}");
        }
        
        if (record.getDbClass() != null) {
            sql.VALUES("CLASS", "@{dbClass,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table awful table
     *
     * @mbg.generated Tue May 28 11:12:45 CST 2019
     */
    public String selectByExample(AwfulTableExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("A.\"CuStOmEr iD\" as \"A_CuStOmEr iD\"");
        } else {
            sql.SELECT("A.\"CuStOmEr iD\" as \"A_CuStOmEr iD\"");
        }
        sql.SELECT("A.\"first name\" as \"A_first name\"");
        sql.SELECT("A.FIRST_NAME as A_FIRST_NAME");
        sql.SELECT("A.FIRSTNAME as A_FIRSTNAME");
        sql.SELECT("A.\"last name\" as \"A_last name\"");
        sql.SELECT("A.E_MAIL as A_E_MAIL");
        sql.SELECT("A.\"_id1\" as \"A__id1\"");
        sql.SELECT("A.\"$id2\" as \"A_$id2\"");
        sql.SELECT("A.\"id5_\" as \"A_id5_\"");
        sql.SELECT("A.\"id6$\" as \"A_id6$\"");
        sql.SELECT("A.\"id7$$\" as \"A_id7$$\"");
        sql.SELECT("A.EMAILADDRESS as A_EMAILADDRESS");
        sql.SELECT("A.\"from\" as \"A_from\"");
        sql.SELECT("A.ACTIVE as A_ACTIVE");
        sql.SELECT("A.ACTIVE1 as A_ACTIVE1");
        sql.SELECT("A.ACTIVE2 as A_ACTIVE2");
        sql.SELECT("A.CLASS as A_CLASS");
        sql.FROM("\"awful table\" A");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table awful table
     *
     * @mbg.generated Tue May 28 11:12:45 CST 2019
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        AwfulTable record = (AwfulTable) parameter.get("record");
        AwfulTableExample example = (AwfulTableExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("\"awful table\" A");
        
        if (record.getCustomerId() != null) {
            sql.SET("A.\"CuStOmEr iD\" = @{record.customerId,jdbcType=INTEGER}");
        }
        
        if (record.getFirstFirstName() != null) {
            sql.SET("A.\"first name\" = @{record.firstFirstName,jdbcType=VARCHAR}");
        }
        
        if (record.getSecondFirstName() != null) {
            sql.SET("A.FIRST_NAME = @{record.secondFirstName,jdbcType=VARCHAR}");
        }
        
        if (record.getThirdFirstName() != null) {
            sql.SET("A.FIRSTNAME = @{record.thirdFirstName,jdbcType=VARCHAR}");
        }
        
        if (record.getLastName() != null) {
            sql.SET("A.\"last name\" = @{record.lastName,jdbcType=VARCHAR}");
        }
        
        if (record.geteMail() != null) {
            sql.SET("A.E_MAIL = @{record.eMail,jdbcType=VARCHAR}");
        }
        
        if (record.getId1() != null) {
            sql.SET("A.\"_id1\" = @{record.id1,jdbcType=INTEGER}");
        }
        
        if (record.getId2() != null) {
            sql.SET("A.\"$id2\" = @{record.id2,jdbcType=INTEGER}");
        }
        
        if (record.getId5() != null) {
            sql.SET("A.\"id5_\" = @{record.id5,jdbcType=INTEGER}");
        }
        
        if (record.getId6() != null) {
            sql.SET("A.\"id6$\" = @{record.id6,jdbcType=INTEGER}");
        }
        
        if (record.getId7() != null) {
            sql.SET("A.\"id7$$\" = @{record.id7,jdbcType=INTEGER}");
        }
        
        if (record.getEmailaddress() != null) {
            sql.SET("A.EMAILADDRESS = @{record.emailaddress,jdbcType=VARCHAR}");
        }
        
        if (record.getFrom() != null) {
            sql.SET("A.\"from\" = @{record.from,jdbcType=VARCHAR}");
        }
        
        sql.SET("A.ACTIVE = @{record.active,jdbcType=BIT}");
        
        if (record.getActive1() != null) {
            sql.SET("A.ACTIVE1 = @{record.active1,jdbcType=BOOLEAN}");
        }
        
        if (record.getActive2() != null) {
            sql.SET("A.ACTIVE2 = @{record.active2,jdbcType=BIT}");
        }
        
        if (record.getDbClass() != null) {
            sql.SET("A.CLASS = @{record.dbClass,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table awful table
     *
     * @mbg.generated Tue May 28 11:12:45 CST 2019
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("\"awful table\" A");
        
        sql.SET("A.\"CuStOmEr iD\" = @{record.customerId,jdbcType=INTEGER}");
        sql.SET("A.\"first name\" = @{record.firstFirstName,jdbcType=VARCHAR}");
        sql.SET("A.FIRST_NAME = @{record.secondFirstName,jdbcType=VARCHAR}");
        sql.SET("A.FIRSTNAME = @{record.thirdFirstName,jdbcType=VARCHAR}");
        sql.SET("A.\"last name\" = @{record.lastName,jdbcType=VARCHAR}");
        sql.SET("A.E_MAIL = @{record.eMail,jdbcType=VARCHAR}");
        sql.SET("A.\"_id1\" = @{record.id1,jdbcType=INTEGER}");
        sql.SET("A.\"$id2\" = @{record.id2,jdbcType=INTEGER}");
        sql.SET("A.\"id5_\" = @{record.id5,jdbcType=INTEGER}");
        sql.SET("A.\"id6$\" = @{record.id6,jdbcType=INTEGER}");
        sql.SET("A.\"id7$$\" = @{record.id7,jdbcType=INTEGER}");
        sql.SET("A.EMAILADDRESS = @{record.emailaddress,jdbcType=VARCHAR}");
        sql.SET("A.\"from\" = @{record.from,jdbcType=VARCHAR}");
        sql.SET("A.ACTIVE = @{record.active,jdbcType=BIT}");
        sql.SET("A.ACTIVE1 = @{record.active1,jdbcType=BOOLEAN}");
        sql.SET("A.ACTIVE2 = @{record.active2,jdbcType=BIT}");
        sql.SET("A.CLASS = @{record.dbClass,jdbcType=VARCHAR}");
        
        AwfulTableExample example = (AwfulTableExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table awful table
     *
     * @mbg.generated Tue May 28 11:12:45 CST 2019
     */
    public String updateByPrimaryKeySelective(AwfulTable record) {
        SQL sql = new SQL();
        sql.UPDATE("\"awful table\"");
        
        if (record.getFirstFirstName() != null) {
            sql.SET("\"first name\" = @{firstFirstName,jdbcType=VARCHAR}");
        }
        
        if (record.getSecondFirstName() != null) {
            sql.SET("FIRST_NAME = @{secondFirstName,jdbcType=VARCHAR}");
        }
        
        if (record.getThirdFirstName() != null) {
            sql.SET("FIRSTNAME = @{thirdFirstName,jdbcType=VARCHAR}");
        }
        
        if (record.getLastName() != null) {
            sql.SET("\"last name\" = @{lastName,jdbcType=VARCHAR}");
        }
        
        if (record.geteMail() != null) {
            sql.SET("E_MAIL = @{eMail,jdbcType=VARCHAR}");
        }
        
        if (record.getId1() != null) {
            sql.SET("\"_id1\" = @{id1,jdbcType=INTEGER}");
        }
        
        if (record.getId2() != null) {
            sql.SET("\"$id2\" = @{id2,jdbcType=INTEGER}");
        }
        
        if (record.getId5() != null) {
            sql.SET("\"id5_\" = @{id5,jdbcType=INTEGER}");
        }
        
        if (record.getId6() != null) {
            sql.SET("\"id6$\" = @{id6,jdbcType=INTEGER}");
        }
        
        if (record.getId7() != null) {
            sql.SET("\"id7$$\" = @{id7,jdbcType=INTEGER}");
        }
        
        if (record.getEmailaddress() != null) {
            sql.SET("EMAILADDRESS = @{emailaddress,jdbcType=VARCHAR}");
        }
        
        if (record.getFrom() != null) {
            sql.SET("\"from\" = @{from,jdbcType=VARCHAR}");
        }
        
        sql.SET("ACTIVE = @{active,jdbcType=BIT}");
        
        if (record.getActive1() != null) {
            sql.SET("ACTIVE1 = @{active1,jdbcType=BOOLEAN}");
        }
        
        if (record.getActive2() != null) {
            sql.SET("ACTIVE2 = @{active2,jdbcType=BIT}");
        }
        
        if (record.getDbClass() != null) {
            sql.SET("CLASS = @{dbClass,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("\"CuStOmEr iD\" = @{customerId,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table awful table
     *
     * @mbg.generated Tue May 28 11:12:45 CST 2019
     */
    protected void applyWhere(SQL sql, AwfulTableExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}