package mbg.test.mb3.generated.annotated.miscellaneous.mapper;

import java.util.List;
import java.util.Map;
import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObject;
import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectCriteria.Criteria;
import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectCriteria.Criterion;
import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectCriteria;
import org.apache.ibatis.jdbc.SQL;

public class MyObjectSqlProvider {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbg.generated
     */
    public String countByExample(MyObjectCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("PKFIELDS A");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbg.generated
     */
    public String deleteByExample(MyObjectCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("PKFIELDS A");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbg.generated
     */
    public String insertSelective(MyObject record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("PKFIELDS");
        
        if (record.getId2() != null) {
            sql.VALUES("ID2", "@{id2,jdbcType=INTEGER}");
        }
        
        if (record.getId1() != null) {
            sql.VALUES("ID1", "@{id1,jdbcType=INTEGER}");
        }
        
        if (record.getFirstname() != null) {
            sql.VALUES("FIRSTNAME", "@{firstname,jdbcType=VARCHAR,typeHandler=mbg.test.mb3.common.FirstNameTypeHandler}");
        }
        
        if (record.getLastname() != null) {
            sql.VALUES("LASTNAME", "@{lastname,jdbcType=VARCHAR}");
        }
        
        if (record.getStartDate() != null) {
            sql.VALUES("DATEFIELD", "@{startDate,jdbcType=DATE}");
        }
        
        if (record.getTimefield() != null) {
            sql.VALUES("TIMEFIELD", "@{timefield,jdbcType=TIME,typeHandler=mbg.test.mb3.common.MyTimeTypeHandler}");
        }
        
        if (record.getTimestampfield() != null) {
            sql.VALUES("TIMESTAMPFIELD", "@{timestampfield,jdbcType=TIMESTAMP}");
        }
        
        sql.VALUES("DECIMAL60FIELD", "@{decimal60field,jdbcType=DECIMAL}");
        
        if (record.getDecimal100field() != null) {
            sql.VALUES("DECIMAL100FIELD", "@{decimal100field,jdbcType=DECIMAL}");
        }
        
        if (record.getDecimal155field() != null) {
            sql.VALUES("DECIMAL155FIELD", "@{decimal155field,jdbcType=DECIMAL}");
        }
        
        if (record.getWierdField() != null) {
            sql.VALUES("\"wierd$Field\"", "@{wierdField,jdbcType=INTEGER}");
        }
        
        if (record.getBirthDate() != null) {
            sql.VALUES("\"birth date\"", "@{birthDate,jdbcType=DATE}");
        }
        
        if (record.getStringboolean() != null) {
            sql.VALUES("STRINGBOOLEAN", "@{stringboolean,jdbcType=CHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbg.generated
     */
    public String selectByExample(MyObjectCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("A.ID2 as A_ID2");
        } else {
            sql.SELECT("A.ID2 as A_ID2");
        }
        sql.SELECT("A.ID1 as A_ID1");
        sql.SELECT("A.FIRSTNAME as A_FIRSTNAME");
        sql.SELECT("A.LASTNAME as A_LASTNAME");
        sql.SELECT("A.DATEFIELD as A_DATEFIELD");
        sql.SELECT("A.TIMEFIELD as A_TIMEFIELD");
        sql.SELECT("A.TIMESTAMPFIELD as A_TIMESTAMPFIELD");
        sql.SELECT("A.DECIMAL60FIELD as A_DECIMAL60FIELD");
        sql.SELECT("A.DECIMAL100FIELD as A_DECIMAL100FIELD");
        sql.SELECT("A.DECIMAL155FIELD as A_DECIMAL155FIELD");
        sql.SELECT("A.\"wierd$Field\" as \"A_wierd$Field\"");
        sql.SELECT("A.\"birth date\" as \"A_birth date\"");
        sql.SELECT("A.STRINGBOOLEAN as A_STRINGBOOLEAN");
        sql.FROM("PKFIELDS A");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        MyObject record = (MyObject) parameter.get("record");
        MyObjectCriteria example = (MyObjectCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("PKFIELDS A");
        
        if (record.getId2() != null) {
            sql.SET("A.ID2 = @{record.id2,jdbcType=INTEGER}");
        }
        
        if (record.getId1() != null) {
            sql.SET("A.ID1 = @{record.id1,jdbcType=INTEGER}");
        }
        
        if (record.getFirstname() != null) {
            sql.SET("A.FIRSTNAME = @{record.firstname,jdbcType=VARCHAR,typeHandler=mbg.test.mb3.common.FirstNameTypeHandler}");
        }
        
        if (record.getLastname() != null) {
            sql.SET("A.LASTNAME = @{record.lastname,jdbcType=VARCHAR}");
        }
        
        if (record.getStartDate() != null) {
            sql.SET("A.DATEFIELD = @{record.startDate,jdbcType=DATE}");
        }
        
        if (record.getTimefield() != null) {
            sql.SET("A.TIMEFIELD = @{record.timefield,jdbcType=TIME,typeHandler=mbg.test.mb3.common.MyTimeTypeHandler}");
        }
        
        if (record.getTimestampfield() != null) {
            sql.SET("A.TIMESTAMPFIELD = @{record.timestampfield,jdbcType=TIMESTAMP}");
        }
        
        sql.SET("A.DECIMAL60FIELD = @{record.decimal60field,jdbcType=DECIMAL}");
        
        if (record.getDecimal100field() != null) {
            sql.SET("A.DECIMAL100FIELD = @{record.decimal100field,jdbcType=DECIMAL}");
        }
        
        if (record.getDecimal155field() != null) {
            sql.SET("A.DECIMAL155FIELD = @{record.decimal155field,jdbcType=DECIMAL}");
        }
        
        if (record.getWierdField() != null) {
            sql.SET("A.\"wierd$Field\" = @{record.wierdField,jdbcType=INTEGER}");
        }
        
        if (record.getBirthDate() != null) {
            sql.SET("A.\"birth date\" = @{record.birthDate,jdbcType=DATE}");
        }
        
        if (record.getStringboolean() != null) {
            sql.SET("A.STRINGBOOLEAN = @{record.stringboolean,jdbcType=CHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("PKFIELDS A");
        
        sql.SET("A.ID2 = @{record.id2,jdbcType=INTEGER}");
        sql.SET("A.ID1 = @{record.id1,jdbcType=INTEGER}");
        sql.SET("A.FIRSTNAME = @{record.firstname,jdbcType=VARCHAR,typeHandler=mbg.test.mb3.common.FirstNameTypeHandler}");
        sql.SET("A.LASTNAME = @{record.lastname,jdbcType=VARCHAR}");
        sql.SET("A.DATEFIELD = @{record.startDate,jdbcType=DATE}");
        sql.SET("A.TIMEFIELD = @{record.timefield,jdbcType=TIME,typeHandler=mbg.test.mb3.common.MyTimeTypeHandler}");
        sql.SET("A.TIMESTAMPFIELD = @{record.timestampfield,jdbcType=TIMESTAMP}");
        sql.SET("A.DECIMAL60FIELD = @{record.decimal60field,jdbcType=DECIMAL}");
        sql.SET("A.DECIMAL100FIELD = @{record.decimal100field,jdbcType=DECIMAL}");
        sql.SET("A.DECIMAL155FIELD = @{record.decimal155field,jdbcType=DECIMAL}");
        sql.SET("A.\"wierd$Field\" = @{record.wierdField,jdbcType=INTEGER}");
        sql.SET("A.\"birth date\" = @{record.birthDate,jdbcType=DATE}");
        sql.SET("A.STRINGBOOLEAN = @{record.stringboolean,jdbcType=CHAR}");
        
        MyObjectCriteria example = (MyObjectCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(MyObject record) {
        SQL sql = new SQL();
        sql.UPDATE("PKFIELDS");
        
        if (record.getFirstname() != null) {
            sql.SET("FIRSTNAME = @{firstname,jdbcType=VARCHAR,typeHandler=mbg.test.mb3.common.FirstNameTypeHandler}");
        }
        
        if (record.getLastname() != null) {
            sql.SET("LASTNAME = @{lastname,jdbcType=VARCHAR}");
        }
        
        if (record.getStartDate() != null) {
            sql.SET("DATEFIELD = @{startDate,jdbcType=DATE}");
        }
        
        if (record.getTimefield() != null) {
            sql.SET("TIMEFIELD = @{timefield,jdbcType=TIME,typeHandler=mbg.test.mb3.common.MyTimeTypeHandler}");
        }
        
        if (record.getTimestampfield() != null) {
            sql.SET("TIMESTAMPFIELD = @{timestampfield,jdbcType=TIMESTAMP}");
        }
        
        sql.SET("DECIMAL60FIELD = @{decimal60field,jdbcType=DECIMAL}");
        
        if (record.getDecimal100field() != null) {
            sql.SET("DECIMAL100FIELD = @{decimal100field,jdbcType=DECIMAL}");
        }
        
        if (record.getDecimal155field() != null) {
            sql.SET("DECIMAL155FIELD = @{decimal155field,jdbcType=DECIMAL}");
        }
        
        if (record.getWierdField() != null) {
            sql.SET("\"wierd$Field\" = @{wierdField,jdbcType=INTEGER}");
        }
        
        if (record.getBirthDate() != null) {
            sql.SET("\"birth date\" = @{birthDate,jdbcType=DATE}");
        }
        
        if (record.getStringboolean() != null) {
            sql.SET("STRINGBOOLEAN = @{stringboolean,jdbcType=CHAR}");
        }
        
        sql.WHERE("ID2 = @{id2,jdbcType=INTEGER}");
        sql.WHERE("ID1 = @{id1,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, MyObjectCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}